{"ast":null,"code":"async function insertionSort(array, setArray, speed) {\n  const arr = [...array];\n  const n = arr.length;\n  for (let i = 1; i < n; i++) {\n    let current = arr[i];\n    let j = i - 1;\n    while (j >= 0 && arr[j] > current) {\n      arr[j + 1] = arr[j];\n      setArray([...arr]);\n      await new Promise(resolve => setTimeout(resolve, speed));\n      j--;\n    }\n  }\n}\nexport default insertionSort;","map":{"version":3,"names":["insertionSort","array","setArray","speed","arr","n","length","i","current","j","Promise","resolve","setTimeout"],"sources":["/home/pendulum/sorting/src/algorithms/insertionSort.js"],"sourcesContent":["async function insertionSort(array,setArray,speed) {\n    const arr = [...array];\n    const n = arr.length;\n    for(let i=1;i<n;i++){\n        let current = arr[i];\n        let j= i-1;\n        while(j>=0 && arr[j]>current){\n            arr[j+1] = arr[j];\n            setArray([...arr]);\n            await new Promise((resolve) => setTimeout(resolve, speed));\n            j--;\n        }\n    }\n}\n\nexport default insertionSort;"],"mappings":"AAAA,eAAeA,aAAaA,CAACC,KAAK,EAACC,QAAQ,EAACC,KAAK,EAAE;EAC/C,MAAMC,GAAG,GAAG,CAAC,GAAGH,KAAK,CAAC;EACtB,MAAMI,CAAC,GAAGD,GAAG,CAACE,MAAM;EACpB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,EAACE,CAAC,EAAE,EAAC;IAChB,IAAIC,OAAO,GAAGJ,GAAG,CAACG,CAAC,CAAC;IACpB,IAAIE,CAAC,GAAEF,CAAC,GAAC,CAAC;IACV,OAAME,CAAC,IAAE,CAAC,IAAIL,GAAG,CAACK,CAAC,CAAC,GAACD,OAAO,EAAC;MACzBJ,GAAG,CAACK,CAAC,GAAC,CAAC,CAAC,GAAGL,GAAG,CAACK,CAAC,CAAC;MACjBP,QAAQ,CAAC,CAAC,GAAGE,GAAG,CAAC,CAAC;MAClB,MAAM,IAAIM,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAER,KAAK,CAAC,CAAC;MAC1DM,CAAC,EAAE;IACP;EACJ;AACJ;AAEA,eAAeT,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}